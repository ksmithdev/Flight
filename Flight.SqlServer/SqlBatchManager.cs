using Flight.Database;
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;

namespace Flight
{
    internal class SqlBatchManager : IBatchManager
    {
        public string Combine(IEnumerable<IScript> scripts)
        {
            var builder = new StringBuilder();
            builder.AppendLine($"PRINT 'FLIGHT: Change Set Generated by Flight';");
            builder.AppendLine($"PRINT 'FLIGHT: Generated on {DateTime.UtcNow:g}';");
            builder.AppendLine($"GO");
            foreach (var script in scripts)
            {
                builder.AppendLine($"PRINT 'FLIGHT: Script Name: {script.ScriptName}, Checksum: {script.Checksum}'");
                builder.AppendLine($"GO");
                builder.AppendLine($"");
                builder.AppendLine(script.Text);
            }
            return builder.ToString();
        }

        public IEnumerable<string> Split(IScript script)
        {
            if (script == null)
                throw new ArgumentNullException(nameof(script));

            var commands = Regex.Split(script.Text, @"GO(?:\s+\d*)?(?:\r\n)?");
            foreach (var command in commands)
            {
                if (string.IsNullOrWhiteSpace(command))
                    continue;

                yield return command;
            }
        }
    }
}